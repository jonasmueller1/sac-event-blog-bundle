{% if images is defined and not images is empty %}
    <br>
    <hr>

    {% if publishState is constant('\\Markocupic\\SacEventBlogBundle\\Config\\PublishState::STILL_IN_PROGRESS') %}
        <p><i class="fas fa-info-circle"></i> Bildreihenfolge kann durch Drag-and-Drop verändert werden.</p>
    {% endif %}

    <div id="dashboardEventBlogGallery" class="{% if publishState is constant('\\Markocupic\\SacEventBlogBundle\\Config\\PublishState::STILL_IN_PROGRESS') %}sortable-thumbnail-container {% endif %} dashboard-event-blog-gallery row gx-2 gy-1">
        {% for arrFile in images %}
            {% set counter = ( counter | default(-1) ) + 1 %}

            <div class="col-12 col-sm-6 col-lg-3 thumbnail {% if publishState is constant('\\Markocupic\\SacEventBlogBundle\\Config\\PublishState::STILL_IN_PROGRESS') %}sortable-item {% endif %}responsive" data-item="{{ counter }}" data-path="{{ arrFile.path }}" data-file-id="{{ arrFile.id }}" data-file-uuid="{{ binToUuid.invoke(arrFile.uuid) }}" title="Sortierung mit Drag-and-Drop ändern">
                {{ insert_tag('image::' ~ binToUuid.invoke(arrFile.uuid) ~ '?width=400&height=400&mode=crop&class=w-100 img-fluid')|raw }}

                <div class="d-none">{{ arrFile.caption }}</div>
                {% if publishState is constant('\\Markocupic\\SacEventBlogBundle\\Config\\PublishState::STILL_IN_PROGRESS') %}
                    <div class="dashboard-event-blog-thumb-buttons-container d-flex">
                        {% if arrFile.caption is empty or arrFile.photographer is empty %}
                            <button class="btn blinking missing-caption-or-photographer-name add-caption" title="Fehlende Bildlegende oder Name des Fotografen fehlt"><i class="fal fa-exclamation-circle"></i></button>
                        {% endif %}
                        <button class="btn btn-danger rotate-image" title="Bild im GUZ 90° drehen"><i class="fal fa-history"></i></button>
                        <button class="btn btn-danger remove-image" title="Bild löschen"><i class="fal fa-trash"></i></button>
                        <button class="btn btn-danger add-caption" title="Bildunterschrift und Fotografen-Name hinzufügen"><i class="fal fa-pencil"></i></button>
                    </div>
                {% endif %}
            </div>
        {% endfor %}
    </div>
    <!-- End gallery -->


    {% if publishState is constant('\\Markocupic\\SacEventBlogBundle\\Config\\PublishState::STILL_IN_PROGRESS') %}
        <script>
            document.addEventListener("DOMContentLoaded", (event) => {
                // Open modal for caption edit
                jQuery('button.add-caption').click(function () {
                    let path = jQuery(this).closest('.thumbnail').attr('data-path');
                    let item = jQuery(this).closest('.thumbnail').attr('data-item');
                    let fileUuid = jQuery(this).closest('.thumbnail').attr('data-file-uuid');
                    let modal = jQuery('.modal.write-event-blog-image-caption').first();
                    jQuery(modal).find('.image-full-res').attr('src', path);
                    jQuery(modal).attr('data-item', item);

                    // Get caption text by xhr request
                    $.post('ajaxMemberDashboardWriteEventBlog/getCaption', {
                        'REQUEST_TOKEN': '{{ request_token }}',
                        'fileUuid': fileUuid
                    }).done(function (json) {
                        if (json.status !== 'success') {
                            console.log(json);
                        } else {
                            jQuery(modal).modal('toggle');
                            jQuery(modal).find('#imageCaptionInput').val(json.caption);
                            jQuery(modal).find('#imagePhotographerInput').val(json.photographer);
                        }
                    }).always(function () {
                        //window.location.reload();
                    });
                });

                // Save caption to the server
                jQuery('.modal.write-event-blog-image-caption button#saveCaptionButton').click(function () {
                    jQuery('.write-event-blog-image-caption').modal('hide');
                    let caption = jQuery('.modal.write-event-blog-image-caption #imageCaptionInput').val();
                    let photographer = jQuery('.modal.write-event-blog-image-caption #imagePhotographerInput').val();
                    let modal = jQuery(this).closest('.modal');
                    let item = jQuery(modal).attr('data-item');
                    let thumbnail = jQuery('#dashboardEventBlogGallery').find('.thumbnail[data-item="' + item + '"]');
                    thumbnail.attr('data-caption', caption);
                    let fileUuid = jQuery(thumbnail).attr('data-file-uuid');
                    jQuery(modal).modal('hide');

                    $.post('ajaxMemberDashboardWriteEventBlog/setCaption', {
                        'REQUEST_TOKEN': '{{ request_token }}',
                        'fileUuid': fileUuid,
                        'caption': caption,
                        'photographer': photographer
                    }).done(function (json) {
                        if (json.status !== 'success') {
                            console.log(json);
                        }
                    }).always(function () {
                        window.location.reload();
                    });
                });
            });
        </script>
    {% endif %}


    {% if publishState is constant('\\Markocupic\\SacEventBlogBundle\\Config\\PublishState::STILL_IN_PROGRESS') %}

        <script>
            "use strict";

            document.addEventListener("DOMContentLoaded", (event) => {

                /**
                 * Remove image from collection
                 */
                jQuery('.remove-image').on('click touchmove', function (e) {
                    e.preventDefault();
                    let elImage = jQuery(this).closest('[data-file-uuid]');
                    if (elImage.length) {
                        let uuid = jQuery(elImage).data('file-uuid');
                        if (typeof uuid !== 'undefined') {
                            $.post('ajaxMemberDashboardWriteEventBlog/removeImage', {
                                'REQUEST_TOKEN': '{{ request_token }}',
                                'eventId': '{{ eventId }}',
                                'uuid': uuid
                            }).done(function (json) {
                                if (json.status !== 'success') {
                                    console.log(json);
                                }
                                elImage.fadeOut(400, function () {
                                    jQuery(this).remove();
                                });
                            });
                        }
                    }
                });

                // Rotate image
                jQuery('.rotate-image').on('click touchmove', function (e) {
                    e.preventDefault();
                    let elImage = jQuery(this).closest('[data-file-id]');
                    if (elImage.length) {
                        let fileId = jQuery(elImage).data('file-id');
                        if (typeof fileId !== 'undefined') {
                            $.post('ajaxMemberDashboardWriteEventBlog/rotateImage', {
                                'REQUEST_TOKEN': '{{ request_token }}',
                                'fileId': fileId
                            }).done(function (json) {
                                if (json.status !== 'success') {
                                    console.log(json);
                                } else {
                                    window.location = document.URL;
                                }
                            });
                        }
                    }
                });

                /**
                 * Image drag and drop sorting
                 * @type {Element|*}
                 */
                let container = document.getElementById("dashboardEventBlogGallery");
                Sortable.create(container, {
                    animation: 50, // ms, animation speed moving items when sorting, `0` — without animation
                    //handle: ".sortable-item", // Restricts sort start click/touch to the specified element
                    draggable: ".sortable-item", // Specifies which items inside the element should be sortable
                    onUpdate: function (event) {
                        let item = event.item; // the current dragged HTMLElement
                        let arrUuid = [];
                        let collection = jQuery(item).closest('.sortable-thumbnail-container').find('.sortable-item');
                        jQuery(collection).each(function () {
                            arrUuid.push(jQuery(this).data('fileUuid'));
                        });
                        $.post('ajaxMemberDashboardWriteEventBlog/sortGallery', {
                            'REQUEST_TOKEN': '{{ request_token }}',
                            'eventId': '{{ eventId }}',
                            'uuids': JSON.stringify(arrUuid)
                        }).done(function (json) {
                            if (json.status !== 'success') {
                                console.log(json);
                            }
                        });
                    }
                });
            });
        </script>
    {% endif %}
{% endif %}
